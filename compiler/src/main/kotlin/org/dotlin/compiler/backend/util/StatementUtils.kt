package org.dotlin.compiler.backend.util

import org.jetbrains.kotlin.ir.declarations.IrDeclaration
import org.jetbrains.kotlin.ir.declarations.IrFunction
import org.jetbrains.kotlin.ir.expressions.*
import org.jetbrains.kotlin.ir.expressions.IrStatementOrigin.FOR_LOOP

fun IrExpression.isStatementIn(container: IrStatementContainer): Boolean = this in container.statements || run {
    fun IrExpression?.containsOrIsThisStatement() = when (this) {
        this@isStatementIn -> true
        is IrStatementContainer -> this@isStatementIn.isStatementIn(this)
        else -> false
    }

    for (it in container.statements) {
        when (it) {
            is IrWhen -> for (branch in it.branches) {
                if (branch.result.containsOrIsThisStatement()) {
                    return true
                }
            }
            is IrTry -> when {
                it.containsOrIsThisStatement() -> return true
                it.tryResult.containsOrIsThisStatement() -> return true
                it.finallyExpression.containsOrIsThisStatement() -> return true
                else -> for (catch in it.catches) {
                    if (catch.result.containsOrIsThisStatement()) {
                        return true
                    }
                }
            }
            is IrLoop -> if (it.body.containsOrIsThisStatement()) return true
            is IrFunction -> if (isStatementIn(it)) return true
            is IrBlock -> when (it.origin) {
                // We don't want to check in blocks generated by e.g. when or elvis expressions.
                null, FOR_LOOP -> if (it.containsOrIsThisStatement()) return true
            }
        }
    }

    return false
}

fun IrExpression.isStatementIn(container: IrFunction) =
    (container.body as? IrBlockBody?)?.let { isStatementIn(it) } == true

fun IrExpression.isStatementIn(container: IrDeclaration) =
    (container as? IrFunction)?.let { isStatementIn(it) } == true