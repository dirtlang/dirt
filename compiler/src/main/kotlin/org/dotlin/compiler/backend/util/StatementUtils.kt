package org.dotlin.compiler.backend.util

import org.jetbrains.kotlin.ir.IrStatement
import org.jetbrains.kotlin.ir.declarations.IrDeclaration
import org.jetbrains.kotlin.ir.declarations.IrFunction
import org.jetbrains.kotlin.ir.expressions.*
import org.jetbrains.kotlin.ir.expressions.IrStatementOrigin.FOR_LOOP

fun IrExpression.isStatementIn(container: IrStatementContainer): Boolean = this in container.statements || run {
    val wantedStatement = this@isStatementIn

    for (it in container.statements) {
        if (it.containsWantedStatement(wantedStatement)) {
            return@run true
        }
    }

    false
}

private fun IrStatement.containsWantedStatement(wantedStatement: IrExpression): Boolean {
    when (this) {
        is IrWhen -> for (branch in branches) {
            if (branch.result.containsOrIsWantedStatement(wantedStatement)) {
                return true
            }
        }

        is IrTry -> when {
            tryResult.containsOrIsWantedStatement(wantedStatement) -> return true
            finallyExpression.containsOrIsWantedStatement(wantedStatement) -> return true
            else -> for (catch in catches) {
                if (catch.result.containsOrIsWantedStatement(wantedStatement)) {
                    return true
                }
            }
        }

        is IrLoop -> if (body.containsOrIsWantedStatement(wantedStatement)) return true
        is IrFunction -> if (wantedStatement.isStatementIn(this)) return true
        is IrBlock -> when (origin) {
            // We don't want to check in blocks generated by e.g. when or elvis expressions.
            null, FOR_LOOP -> if (containsOrIsWantedStatement(wantedStatement)) return true
        }
    }

    return false
}

private fun IrExpression?.containsOrIsWantedStatement(wantedStatement: IrExpression) = when (this) {
    wantedStatement -> true
    is IrStatementContainer -> wantedStatement.isStatementIn(this)
    null -> false
    else -> containsWantedStatement(wantedStatement)
}

fun IrExpression.isStatementIn(container: IrFunction) =
    (container.body as? IrBlockBody?)?.let { isStatementIn(it) } == true

fun IrExpression.isStatementIn(container: IrDeclaration) =
    (container as? IrFunction)?.let { isStatementIn(it) } == true